grammar org.rjpower.iced.IcedCoffee with org.eclipse.xtext.common.Terminals hidden(WS, ML_COMMENT, SL_COMMENT, NL)

generate icedCoffee "http://www.rjpower.org/IcedCoffee"

// This is a trivial, incomplete grammar, but enough to give us some
// basic indentation support and keyword/comment/string highlighting.
Script hidden(KW_REQUIRE, KW_MISC, SL_COMMENT, PUNCT_LPAREN, PUNCT_RPAREN, PUNCT_COLON, PUNCT_ASSIGNMENT, INDENT,
DEDENT, WS, NL, ANY_OTHER):
  {Script}
  expressions+=Expr*;

Expr returns Expr:
  {Expr}
  (require=Require
  | list=List
  | block=Block
  | (KW_MISC | KW_EXPORTS)
  | (KW_FATARROW | KW_THINARROW)
  | SL_COMMENT
  | ANY_OTHER);

List:
  PUNCT_LBRACKET values+=Expr (',' values+=Expr)* PUNCT_RBRACKET;

RValue:
  (ID | CLASSVAR | INT | STRING);

Block:
  {Block} INDENT content=Script DEDENT;

Require returns Expr:
  KW_REQUIRE PUNCT_LPAREN? module=STRING PUNCT_RPAREN?;

terminal STRING:
  ("'''"->"'''") |
  ('"""'->'"""') |
  ('"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | '"'))* '"') |
  ("'" ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | "'"))* "'");

terminal KW_EXPORTS:
  'exports';

terminal KW_REQUIRE:
  'require';

terminal KW_FATARROW:
  '=>';

terminal KW_THINARROW:
  '->';

terminal KW_MISC:
  'and' |
  'await' |
  'break' |
  'by' |
  'catch' |
  'class' |
  'continue' |
  'debugger' |
  'defer' |
  'delete' |
  'do' |
  'else' |
  'extends' |
  'false' |
  'finally' |
  'for' |
  'if' |
  'in' |
  'instanceof' |
  'is' |
  'isnt' |
  'loop' |
  'new' |
  'no' |
  'not' |
  'null' |
  'of' |
  'off' |
  'on' |
  'or' |
  'return' |
  'super' |
  'switch' |
  'then' |
  'this' |
  'throw' |
  'true' |
  'try' |
  'typeof' |
  'undefined' |
  'unless' |
  'until' |
  'when' |
  'while' |
  'yes';

terminal PUNCT_ASSIGNMENT:
  '=' | '?=' | '+=' | '-=' | '||=';

terminal PUNCT_LBRACKET:
  '[';

terminal PUNCT_RBRACKET:
  ']';

terminal PUNCT_LPAREN:
  '(';

terminal PUNCT_RPAREN:
  ')';

terminal PUNCT_COLON:
  ':';

terminal CLASSVAR:
  '@' ('a'..'z' | 'A'..'Z' | '0'..'9' | '_' | '$')+;

  // These are 'dummy' tokens.  The lexer will output these names instead of
// actual tokens.  Why? So that we can have Antlr generate most of the lexer
// for us and just override the whitespace recognition.
terminal INDENT:
  'INDENT';

terminal DEDENT:
  'DEDENT';

terminal NL:
  ('\r' | '\n')*;

terminal WS:
  (' ' | '\t')*;

terminal SL_COMMENT:
  '#' !('\n' | '\r')*;

terminal ID:
  '^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;

terminal ANY_OTHER:
  .;
