// This is a trivial 'grammar' - mostly just lexer token definitions - it's 
// enough information to provide basic indentation support and 
// keyword/comment/string highlighting.
grammar org.rjpower.iced.IcedCoffee

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate icedCoffee "http://www.rjpower.org/IcedCoffee"

// Accept anything.
Script:
  items+=(KEYWORD | REGEXP | PUNCT | IDENTIFIER | STRING | INDENT | DEDENT | WS | NL | SL_COMMENT | ANY_OTHER)*;

KEYWORD:
  KW_EXPORTS | KW_REQUIRE | KW_FATARROW | KW_THINARROW | KW_MISC;

PUNCT:
  PUNCT_OPERATOR | PUNCT_ASSIGNMENT | PUNCT_LBRACKET | PUNCT_RBRACKET | PUNCT_LPAREN | PUNCT_RPAREN | PUNCT_COLON;

IDENTIFIER:
  CLASSNAME | CLASSVAR | ID | NUMBER;

  // These are 'dummy' tokens.  The lexer will output these names instead of
// actual tokens.  This way we can have Antlr generate most of the lexer
// for us and just override the whitespace recognition.
terminal INDENT:
  'INDENT';

terminal DEDENT:
  'DEDENT';

terminal STRING:
  ("'''"->"'''") |
  ('"""'->'"""') |
  ('"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | 'x' | '"' | "'" | '\\') | !('\\' | '"'))* '"') |
  ("'" ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | 'x' | '"' | "'" | '\\') | !('\\' | "'"))* "'");

terminal REGEXP:
  ('///'->'///') | 
  ('/' (('\\' .) | !('\\' | '/' | '\n' | '\r'))+ '/');
  
terminal KW_EXPORTS:
  'exports';

terminal KW_REQUIRE:
  'require';

terminal KW_FATARROW:
  '=>';

terminal KW_THINARROW:
  '->';

terminal KW_MISC:
  'and' |
  'await' |
  'break' |
  'by' |
  'catch' |
  'class' |
  'continue' |
  'debugger' |
  'defer' |
  'delete' |
  'do' |
  'else' |
  'extends' |
  'false' |
  'finally' |
  'for' |
  'if' |
  'in' |
  'instanceof' |
  'is' |
  'isnt' |
  'loop' |
  'new' |
  'no' |
  'not' |
  'null' |
  'of' |
  'off' |
  'on' |
  'or' |
  'return' |
  'super' |
  'switch' |
  'then' |
  'this' |
  'throw' |
  'true' |
  'try' |
  'typeof' |
  'undefined' |
  'unless' |
  'until' |
  'when' |
  'while' |
  'yes';

terminal NUMBER:
  ('0'..'9')+ ('.' ('0'..'9')*)?;

terminal PUNCT_OPERATOR:
  '||' | '&&' | '&' | '|' | '+' | '-' | '*' | '/' | '%';

terminal PUNCT_ASSIGNMENT:
  '||=' | '=' | '?=' | '+=' | '-=';

terminal PUNCT_LBRACKET:
  '[';

terminal PUNCT_RBRACKET:
  ']';

terminal PUNCT_LPAREN:
  '(';

terminal PUNCT_RPAREN:
  ')';

terminal PUNCT_COLON:
  ':';

terminal CLASSNAME:
  'A..Z' ('A..Z' | 'a..z')*;

terminal CLASSVAR:
  '@' ('a'..'z' | 'A'..'Z' | '0'..'9' | '_' | '$')+;

terminal ID:
  ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;

terminal NL:
  ('\r' | '\n')+;

terminal WS:
  (' ' | '\t')+;

terminal SL_COMMENT:
  '#' !('\n' | '\r')*;

terminal ANY_OTHER:
  .;
